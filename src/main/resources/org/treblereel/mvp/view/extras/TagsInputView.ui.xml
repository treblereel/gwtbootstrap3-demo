<!--
  #%L
  GwtBootstrap3
  %%
  Copyright (C) 2013 -2015 GwtBootstrap3
  %%
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  #L%
  -->
<!DOCTYPE ui:UiBinder SYSTEM "http://dl.google.com/gwt/DTD/xhtml.ent">

<ui:UiBinder xmlns:ui="urn:ui:org.gwtproject.uibinder"
             xmlns:b="urn:import:org.gwtbootstrap3.client.ui"
             xmlns:b.html="urn:import:org.gwtbootstrap3.client.ui.html"
             xmlns:tagsinput="urn:import:org.gwtbootstrap3.extras.tagsinput.client.ui"
             xmlns:tagsinputbase="urn:import:org.gwtbootstrap3.extras.tagsinput.client.ui.base"
             xmlns:d="urn:import:org.treblereel.ui">

  <ui:style>
    @external bootstrap-tagsinput;

    .danger {
    background-color: #fcf2f2;
    border-color: #dFb5b4;
    }

    .margin-fix {
    margin-top: 0 !important;
    }

    .spacing {
    margin-left: 5px;
    }

    .bootstrap-tagsinput {
    width: 100%;
    }
  </ui:style>

  <b:Row>
    <b:Column size="XS_12">
      <b:PageHeader text="Tags Input"/>

      <b:BlockQuote>
        <b.html:Strong>Original Library Link:</b.html:Strong>
        <b:Anchor target="_blank" addStyleNames="{style.spacing}" href="https://github.com/bootstrap-tagsinput/bootstrap-tagsinput">
          Tags Input
        </b:Anchor>
        <b.html:Br/>
        <b.html:Strong>Current Version Supported: 0.8.0</b.html:Strong>
      </b:BlockQuote>

      <b:BlockQuote addStyleNames="{style.danger}">
        <b:Heading addStyleNames="{style.margin-fix}" size="H4" text="Required for use"/>
        <b.html:Paragraph>
          To use Tags Input, you must first add the extras module to your project. In Maven:
        </b.html:Paragraph>
        <d:PrettyPre addStyleNames="lang-xml">
          &lt;dependency&gt;\n
          \s\s\s\s&lt;groupId&gt;org.gwtbootstrap3&lt;/groupId&gt;\n
          \s\s\s\s&lt;artifactId&gt;gwtbootstrap3-extras&lt;/artifactId&gt;\n
          \s\s\s\s&lt;version&gt;VERSION&lt;/version&gt;\n
          \s\s\s\s&lt;scope&gt;provided&lt;/scope&gt;\n
          &lt;/dependency&gt;
        </d:PrettyPre>
        <b.html:Paragraph>
          Then you need to inherit the following GWT Module
          <strong>additionally</strong>
          to any GwtBootstrap3
          module into your *.gwt.xml of your project:
        </b.html:Paragraph>
        <d:PrettyPre addStyleNames="lang-xml">
          &lt;inherits name="org.gwtbootstrap3.extras.tagsinput.TagsInput"/&gt;
        </d:PrettyPre>
        <b.html:Paragraph>
          If you want to use typeahead functionalty, then you also need to inherit
          Typeahead module into your *.gwt.xml of your project:
        </b.html:Paragraph>
        <d:PrettyPre addStyleNames="lang-xml">
          &lt;inherits name="org.gwtbootstrap3.extras.typeahead.Typeahead"/&gt;
        </d:PrettyPre>
        <b.html:Paragraph>
          Last but not least must add this namespace to your *.ui.xml (don't have to name it select):
        </b.html:Paragraph>
        <d:PrettyPre addStyleNames="lang-xml">
          xmlns:tagsinput="urn:import:org.gwtbootstrap3.extras.tagsinput.client.ui"
        </d:PrettyPre>
      </b:BlockQuote>

      <b:Panel>
        <b:PanelHeader>
          <b:Heading size="H3" text="Markup"/>
        </b:PanelHeader>
        <b:PanelBody>
          <tagsinput:TagsInput ui:field="markupTagsInput" value="Belgrade,Amsterdam,Washington"/>
        </b:PanelBody>
        <b:PanelFooter>
          <b:Heading size="H4" text="UiBinder"/>
          <d:PrettyPre addStyleNames="lang-xml">
            &lt;tagsinput:TagsInput ui:field="markupTagsInput" value="Belgrade,Amsterdam,Washington"/&gt;\n
          </d:PrettyPre>

          <b:Heading size="H4" text="Java code"/>
          <d:PrettyPre addStyleNames="lang-java">
            @UiField TagsInput markupTagsInput;\n
            \n
            List&lt;String&gt; tags = new ArrayList&lt;String&gt;();\n
            tags.add("Sydney");\n
            tags.add("Beijing");\n
            tags.add("Cairo");\n
            \n
            for(String tag : tags) {\n
            \s\s\s\smarkupTagsInput.add(tag);\n
            }\n
          </d:PrettyPre>
        </b:PanelFooter>
      </b:Panel>

      <b:Panel>
        <b:PanelHeader>
          <b:Heading size="H3" text="True multi value"/>
          <b.html:Paragraph>Use a <code>&lt;select multiple /&gt;</code> as your input for a tags input, to gain true multivalue support.
          </b.html:Paragraph>
          <b.html:Paragraph>Instead of comma separated string, the values will be set in an array. Existing <code>&lt;option /&gt;</code> elements will automatically be set as tags. This makes it also possible to create tags containing a comma.
          </b.html:Paragraph>
        </b:PanelHeader>
        <b:PanelBody>
          <tagsinput:MVTagsInput ui:field="multiValueTagsInput" value="Belgrade,Amsterdam,Washington"/>
        </b:PanelBody>
        <b:PanelFooter>
          <b:Heading size="H4" text="UiBinder"/>
          <d:PrettyPre addStyleNames="lang-xml">
            &lt;tagsinput:MVTagsInput ui:field="multiValueTagsInput" value="Belgrade,Amsterdam,Washington"/&gt;\n
          </d:PrettyPre>

          <b:Heading size="H4" text="Java code"/>
          <d:PrettyPre addStyleNames="lang-java">
            @UiField MVTagsInput multiValueTagsInput;\n
            \n
            List&lt;String&gt; tags = new ArrayList&lt;String&gt;();\n
            tags.add("Sydney");\n
            tags.add("Beijing");\n
            tags.add("Cairo");\n
            \n
            multiValueTagsInput.add(tags);\n
          </d:PrettyPre>
        </b:PanelFooter>
      </b:Panel>

      <b:Panel>
        <b:PanelHeader>
          <b:Heading size="H3" text="Typeahead"/>
          <b.html:Paragraph>Typeahead is implemented using <b:Anchor href="http://127.0.0.1:8888/GwtBootstrap3Demo.html#typeahead">Twitter typeahead.js widget</b:Anchor>. An example of using this is shown below.
          </b.html:Paragraph>
        </b:PanelHeader>
        <b:PanelBody>
          <tagsinput:TagsInput ui:field="typeaheadTagsInput"/>
        </b:PanelBody>
        <b:PanelFooter>
          <d:PrettyPre addStyleNames="lang-java">
            final List&lt;String&gt; suggestions = new ArrayList&lt;String&gt;();\n
            suggestions.add("Belgrade");\n
            suggestions.add("Amsterdam");\n
            suggestions.add("London");\n
            suggestions.add("Paris");\n
            suggestions.add("Washington");\n
            suggestions.add("New York");\n
            suggestions.add("Los Angeles");\n
            suggestions.add("Sydney");\n
            suggestions.add("Melbourne");\n
            suggestions.add("Canberra");\n
            suggestions.add("Beijing");\n
            suggestions.add("New Delhi");\n
            suggestions.add("Kathmandu");\n
            suggestions.add("Cairo");\n
            suggestions.add("Cape Town");\n
            suggestions.add("Kinshasa");\n
            \n
            StringDataset dataset = new StringDataset(suggestions);\n
            \n
            typeaheadTagsInput.setDatasets(dataset);\n
            typeaheadTagsInput.reconfigure();\n
            typeaheadTagsInput.setTypeahead(suggestions);\n
          </d:PrettyPre>
        </b:PanelFooter>
      </b:Panel>

      <b:Panel>
        <b:PanelHeader>
          <b:Heading size="H3" text="Objects as tags"/>
          <b.html:Paragraph>Instead of just adding strings as tags, bind objects to your tags.</b.html:Paragraph>
          <b.html:Paragraph>TagsInput comes with predefined classes which uses Strings for tags. However, it is possible to bind any Java or JavaScript object as tag.</b.html:Paragraph>
          <b.html:Paragraph>In order to properly process items, it is required to implement and set callbacks which returns <i>itemValue</i> and <i>itemText</i>. Callbacks are instances of <code>ItemValueCallback</code> and <code>ItemTextCallback</code>.
          </b.html:Paragraph>
        </b:PanelHeader>
        <b:PanelBody>
          <tagsinputbase:SingleValueTagsInput ui:field="joTagsInput"/>
        </b:PanelBody>
        <b:PanelFooter>
          <b:Heading size="H4" text="UiBinder"/>
          <d:PrettyPre addStyleNames="lang-xml">
            &lt;tagsinputbase:SingleValueTagsInput ui:field="joTagsInput" /&gt;\n
          </d:PrettyPre>

          <b:Heading size="H4" text="Java code"/>
          <b.html:Paragraph>Objects that are used as items can be of any Java class. In this example, <code>Item</code> is simple class with <code>String</code> and <code>Integer</code> fields with getters and setters.
          </b.html:Paragraph>

          <b:Heading size="H5" text="Setting callbacks"/>
          <d:PrettyPre addStyleNames="lang-java">
            final ItemValueCallback&lt;Item&gt; cbValue = new ItemValueCallback&lt;Item&gt;() {\n
            \s\s\s\s@Override\n
            \s\s\s\spublic String getItemValue(Item item) {\n
            \s\s\s\s\s\s\s\sreturn item.getValue().toString();\n
            \s\s\s\s}\n
            };\n
            \n
            final ItemTextCallback&lt;Item&gt; cbText = new ItemTextCallback&lt;Item&gt;() {\n
            \s\s\s\s@Override\n
            \s\s\s\spublic String getItemText(Item item) {\n
            \s\s\s\s\s\s\s\sreturn item.getText();\n
            \s\s\s\s}\n
            };\n
            \n
            joTagsInput.setItemValue(cbValue);\n
            joTagsInput.setItemText(cbText);\n
            joTagsInput.reconfigure();\n
          </d:PrettyPre>

          <b:Heading size="H5" text="Adding objects as tags"/>
          <d:PrettyPre addStyleNames="lang-java">
            List&lt;Item&gt; tags = new ArrayList&lt;Item&gt;();\n
            tags.add(new Item("Belgrade", 1));\n
            tags.add(new Item("Amsterdam", 2));\n
            tags.add(new Item("London", 3));\n
            joTagsInput.add(tags);\n
          </d:PrettyPre>

          <b:Heading size="H5" text="Adding objects as suggestions"/>
          <d:PrettyPre addStyleNames="lang-java">
            List&lt;Item&gt; suggestions = new ArrayList&lt;Item&gt;();\n
            suggestions.add(new Item("Belgrade", 4));\n
            suggestions.add(new Item("Athens", 5));\n
            CollectionDataset&lt;Item&gt; dataset = new CollectionDataset&lt;Item&gt;(suggestions) {\n
            \s\s\s\s@Override\n
            \s\s\s\spublic String getValue(Item datum) {\n
            \s\s\s\s\s\s\s\sreturn datum != null ? datum.getText() : "";\n
            \s\s\s\s}\n
            };\n
            joTagsInput.setDatasets(dataset);\n
          </d:PrettyPre>
        </b:PanelFooter>
      </b:Panel>

      <b:Panel>
        <b:PanelHeader>
          <b:Heading size="H3" text="Categorizing tags"/>
        </b:PanelHeader>
        <b:PanelBody>
          <tagsinput:TagsInput ui:field="categoryTagsInput" value="Belgrade,Amsterdam,Washington"/>
        </b:PanelBody>
        <b:PanelFooter>
          <b:Heading size="H4" text="UiBinder"/>
          <d:PrettyPre addStyleNames="lang-xml">
            &lt;tagsinput:TagsInput ui:field="categoryTagsInput" value="Belgrade,Amsterdam,Washington"/&gt;\n
          </d:PrettyPre>

          <b:Heading size="H4" text="Java code"/>
          <d:PrettyPre addStyleNames="lang-java">
            @UiField TagsInput categoryTagsInput;\n
            \n
            categoryTagsInput.setTagClass(new TagClassCallback&lt;String&gt;() {\n
            \s\s\s\s@Override\n
            \s\s\s\spublic String getTagClass(String item) {\n
            \s\s\s\s\s\s\s\sswitch(item) {\n
            \s\s\s\s\s\s\s\scase "Belgrade": return "label label-primary";\n
            \s\s\s\s\s\s\s\scase "Amsterdam": return "label label-danger label-important";\n
            \s\s\s\s\s\s\s\scase "Washington": return "label label-success";\n
            \s\s\s\s\s\s\s\scase "Sydney": return "label label-default";\n
            \s\s\s\s\s\s\s\scase "Beijing": return "label label-warning";\n
            \s\s\s\s\s\s\s\scase "Cairo": return "label label-info";\n
            \s\s\s\s\s\s\s\sdefault: return "label label-info";\n
            \s\s\s\s\s\s\s\s}\n
            \s\s\s\s}\n
            });\n
            categoryTagsInput.reconfigure();\n
          </d:PrettyPre>
        </b:PanelFooter>
      </b:Panel>

    </b:Column>
  </b:Row>
</ui:UiBinder> 